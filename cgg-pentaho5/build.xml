<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Graphics Generator" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CGG project
    and works with the common_build.xml file.
  </description>


  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />


  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="../build-res/subfloor-pkg.xml" id="subfloor"/>



  <property name="plugin.name"
            value="cgg"
            description="Name of the plugin"/>


  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

  <!--
    <target name='dist-solution'>
      <copy todir="${solution.stage.dir}" overwrite='true'>
        <fileset dir='solution'>
        <include name=''>
      </copy>
    </target>
  -->


  <property name="runtimelib.dir"
            value="runtime-lib"
            description="Runtime dependencies folder"/>



  <property name="plugin.name"
            value="cgg"
            description="Name of the plugin"/>

  <property name="resource.dir"
            value="resources"
            description="Name of the resource directory"/>

  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>

  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />


  <!-- Setup the compile classpath -->
  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${runtimelib.dir}">
      <include name="**/*.jar" />
    </fileset>

  </path>



  <tstamp/>


  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.stage}-${project.version}"/>

  <echo>distribution.version = ${distribution.version}</echo>

  <target name="dist" depends="clean,resolve,jar,dist-plugin"/>
  <target name="dist-compile" depends="jar,dist-plugin"/>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${distribution.version}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>


  <target name="compile.compile" depends="init">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           memorymaximumsize="${javac.maxmemory}"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath" />
      </classpath>
      <src path="${src.dir}" />
    <src path="../cgg-pentaho-base/src"/>
    </javac>
  </target>


  <!--=======================================================================
              dist

              Creates a distribution of this project's plugin zip
              ====================================================================-->
  <target name="assemble" depends="assemble.init,install-antcontrib, dist-plugin"/>

  <target name="dist-plugin" depends="jar" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${runtimelib.dir}">
        <include name="**/*.jar"/>
        <exclude name="**/batik-js-1.7.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>

    </copy>


    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- create the version file -->
	<tstamp/>
	<property name="sequential.build.id" value="manual-${DSTAMP}"/>


	<echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='${project.stage}' buildId='${sequential.build.id}'>${distribution.version}&lt;/version>"/>


    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="${plugin.name}/**/*"
         excludes="**/Thumbs.db"/>



  <echo file="${dist.dir}/marketplace.xml">&lt;version>
        &lt;branch>${project.stage}&lt;/branch>
		&lt;version>${distribution.version}&lt;/version>
		&lt;name>${marketplace.metadata.name}&lt;/name>
        &lt;package_url>${marketplace.metadata.package_url}&lt;/package_url>
        &lt;description>${marketplace.metadata.description}&lt;/description>
        &lt;developmentStage>
            &lt;lane>Community&lt;/lane>
            &lt;phase>2&lt;/phase>
        &lt;/developmentStage>                                            
		&lt;build_id>${sequential.build.id}&lt;/build_id>
        &lt;min_parent_version>${marketplace.metadata.min_parent_version}&lt;/min_parent_version>

		&lt;/version>	</echo>

  <copy tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" file="${dist.dir}/${plugin.zipfile}"/>


  </target>

  <!--=======================================================================
              dist-samples

              Creates a distribution of this project's samples
              ====================================================================-->
  <target name="dist-samples" depends="init">

    <mkdir dir="${samples.stage.dir}"/>

    <!-- copy over all the xactions within the cdf-samples folder -->
    <copy todir="${samples.stage.dir}/bi-developers" overwrite="true" >
      <fileset dir="solution/bi-developers"></fileset>
    </copy>

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}"
         includes="**/*"
         excludes="**/Thumbs.db"
        />
  </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, jar, dist-plugin" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy samples -->
    <!--copy todir="${plugin.local.install.solutions.dir}/">
      <fileset dir="${samples.stage.dir}/">
        <include name="**/*" />
      </fileset>
    </copy-->

    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>

  </target>


  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

</project>
